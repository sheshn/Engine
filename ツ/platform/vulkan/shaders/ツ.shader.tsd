#version 450
#extension GL_EXT_nonuniform_qualifier : enable

#define s32 int
#define u32 uint
#define f32 float
#define f64 double

#define v2 vec2
#define v3 vec3
#define v4 vec4
#define uv2 uvec2
#define m4x4 mat4

struct Material
{
    v4  base_color_factor;
    f32 metallic_factor;
    f32 roughness_factor;

    u32 albedo_texture_id;
    u32 normal_texture_id;
    u32 roughness_metallic_occlusion_texture_id;

    u32 reserved[7];
};

struct Transform
{
    m4x4 model;
};

struct Frame_Uniforms
{
    m4x4 view_projection;
};

layout Default_Layout_Vertex
{
    layout(set = 0, binding = 3) buffer transform_buffer { Transform xforms[]; };
    layout(set = 1, binding = 0) uniform frame_uniform_buffer { Frame_Uniforms frame_uniforms; };

    layout(location = 0) in uv2 in_instance_data;
    layout(location = 1) in v3 in_position;
    layout(location = 2) in v2 in_uv0;

    layout(location = 0) flat out uv2 out_instance_data;
    layout(location = 1) out v2 out_uv0;
};

vertex(Default_Layout_Vertex) void default_vertex_shader()
{
    Transform xform = xforms[in_instance_data.x];
    gl_Position = frame_uniforms.view_projection * xform.model * v4(in_position.xyz, 1.0);

    out_instance_data = in_instance_data;
    out_uv0 = in_uv0;
}

layout Default_Layout_Fragment
{
    layout(set = 0, binding = 0) uniform sampler texture_2d_sampler;
    layout(set = 0, binding = 1) uniform texture2D textures_2d[];
    layout(set = 0, binding = 2) buffer material_buffer { Material materials[]; };
    layout(set = 0, binding = 3) buffer transform_buffer { Transform xforms[]; };
    layout(set = 1, binding = 0) uniform frame_uniform_buffer { Frame_Uniforms frame_uniforms; };

    layout(location = 0) flat in uv2 in_instance_data;
    layout(location = 1) in v2 in_uv0;

    layout(location = 0) out v4 out_color;
};

fragment(Default_Layout_Fragment) void default_fragment_shader()
{
    Material material = materials[in_instance_data.y];
    out_color = texture(sampler2D(textures_2d[material.albedo_texture_id], texture_2d_sampler), in_uv0) * material.base_color_factor;
}

layout Final_Pass_Layout_Vertex
{
    layout(location = 0) out v2 out_uv;
};

vertex(Final_Pass_Layout_Vertex) void final_pass_vertex_shader()
{
    out_uv = v2((gl_VertexIndex << 1) & 2, gl_VertexIndex & 2);
    gl_Position = v4(out_uv * 2.0 - 1.0, 0, 1.0);
}

layout Final_Pass_Layout_Fragment
{
    layout(set = 0, binding = 0) uniform sampler texture_2d_sampler;
    layout(set = 0, binding = 1) uniform texture2D color0_attachment;

    layout(location = 0) in v2 in_uv;

    layout(location = 0) out v4 out_color;
};

fragment(Final_Pass_Layout_Fragment) void final_pass_fragment_shader()
{
    // TODO: Tonemap!
    out_color = texture(sampler2D(color0_attachment, texture_2d_sampler), in_uv);
}